package com.ywh.ds.trie;

/**
 * 前缀树节点
 *
 * @author ywh
 * @since 25/11/2019
 */
public class TrieNode {

    /**
     * 当前节点的子节点个数
     */
    public int count;

    /**
     * 标记该节点是否可作为一个单词的结尾
     */
    public boolean end;

    /**
     * 子节点数组，把 a~z 映射到 [0, 25]
     * 存储效率：使用数组存储子节点指针。如果字符串中包含 [a-z]，每个节点都要存储一个长度为 26 的数组，
     * 并且每个数组元素要存储一个 8bytes 指针（或 4bytes）。
     * 即便一个节点只有很少的子节点，也要维护一个长度为 26 的数组。
     * 数组长度为 26，每个元素是 8 字节，每个节点就会额外需要 26*8=208 个字节（字符数量更多时数组长度更大）。
     *
     * 可换成其他数据结构来存储节点的子节点指针，比如有序数组、跳表、散列表、红黑树等。
     * 假设用有序数组，数组中的指针按照所指向的子节点中的字符的大小顺序排列。
     * 查询时可以通过二分搜索快速找到某个字符匹配的子节点的指针，但是插入时由于要维护有序性牺牲一些效率。
     */
    public TrieNode[] children;

    public TrieNode() {
        this.end = false;
        children = new TrieNode[26];
        count = 0;
    }
}
